Created by PLY version 3.3 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT_SINGLELINE
    COMMENT_MULTILINE

Grammar

Rule 0     S' -> script_file
Rule 1     script_file -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> assignment_statement
Rule 5     statement -> loop_statement
Rule 6     statement -> if_statement
Rule 7     statement -> break_statement
Rule 8     statement -> continue_statement
Rule 9     statement -> return_statement
Rule 10    statement -> compound_statement
Rule 11    statement -> named_function_decl
Rule 12    assignment_statement -> lvalue ASSIGN expression SEMICOLON
Rule 13    assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON
Rule 14    break_statement -> BREAK SEMICOLON
Rule 15    continue_statement -> CONTINUE SEMICOLON
Rule 16    return_statement -> RETURN SEMICOLON
Rule 17    return_statement -> RETURN expression SEMICOLON
Rule 18    loop_statement -> for_loop_statement
Rule 19    loop_statement -> do_loop_statement
Rule 20    loop_statement -> while_loop_statement
Rule 21    for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement
Rule 22    do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 23    while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement
Rule 24    compound_statement -> LBRACE statement_list RBRACE
Rule 25    if_statement -> IF LPAREN expression RPAREN compound_statement
Rule 26    if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement
Rule 27    lvalue -> ID
Rule 28    lvalue -> lvalue DOT ID
Rule 29    lvalue -> lvalue LBRACKET expression RBRACKET
Rule 30    expression -> binary_expression
Rule 31    binary_expression -> unary_expression
Rule 32    binary_expression -> binary_expression PLUS binary_expression
Rule 33    binary_expression -> binary_expression MINUS binary_expression
Rule 34    binary_expression -> binary_expression OR binary_expression
Rule 35    binary_expression -> binary_expression AND binary_expression
Rule 36    binary_expression -> binary_expression LT binary_expression
Rule 37    binary_expression -> binary_expression GT binary_expression
Rule 38    binary_expression -> binary_expression LEQ binary_expression
Rule 39    binary_expression -> binary_expression GEQ binary_expression
Rule 40    binary_expression -> binary_expression EQ binary_expression
Rule 41    binary_expression -> binary_expression NE binary_expression
Rule 42    unary_expression -> postfix_expression
Rule 43    unary_expression -> STAR binary_expression
Rule 44    unary_expression -> NOT binary_expression
Rule 45    unary_expression -> MINUS binary_expression
Rule 46    postfix_expression -> primary_expression
Rule 47    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 48    postfix_expression -> postfix_expression LPAREN expression_list RPAREN
Rule 49    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 50    postfix_expression -> postfix_expression DOT identifier_name
Rule 51    primary_expression -> identifier_name
Rule 52    primary_expression -> list_expression
Rule 53    primary_expression -> constant
Rule 54    primary_expression -> function_decl_expression
Rule 55    primary_expression -> lambda_expression
Rule 56    primary_expression -> dict_expression
Rule 57    primary_expression -> LPAREN expression RPAREN
Rule 58    constant -> INT_LITERAL
Rule 59    constant -> string_literal
Rule 60    constant -> boolean_literal
Rule 61    string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK
Rule 62    string_chars -> <empty>
Rule 63    string_chars -> string_chars string_char
Rule 64    string_char -> UNESCAPED
Rule 65    string_char -> ESCAPE QUOTATION_MARK
Rule 66    string_char -> ESCAPE BACKSLASH
Rule 67    string_char -> ESCAPE BACKSPACE_CHAR
Rule 68    string_char -> ESCAPE FORM_FEED_CHAR
Rule 69    string_char -> ESCAPE LINE_FEED_CHAR
Rule 70    string_char -> ESCAPE CARRIAGE_RETURN_CHAR
Rule 71    string_char -> ESCAPE TAB_CHAR
Rule 72    string_char -> ESCAPE UNICODE_HEX
Rule 73    boolean_literal -> TRUE
Rule 74    boolean_literal -> FALSE
Rule 75    list_expression -> LBRACKET RBRACKET
Rule 76    list_expression -> LBRACKET expression_list RBRACKET
Rule 77    function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement
Rule 78    function_decl_expression -> FUNC LPAREN RPAREN compound_statement
Rule 79    named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement
Rule 80    named_function_decl -> FUNC ID LPAREN RPAREN compound_statement
Rule 81    lambda_expression -> LAMBDA identifier_list COLON expression
Rule 82    lambda_expression -> LAMBDA COLON expression
Rule 83    dict_expression -> LBRACE RBRACE
Rule 84    dict_expression -> LBRACE key_value_list RBRACE
Rule 85    key_value_list -> expression COLON expression
Rule 86    key_value_list -> key_value_list COMMA expression COLON expression
Rule 87    expression_list -> expression
Rule 88    expression_list -> expression_list COMMA expression
Rule 89    identifier_list -> ID
Rule 90    identifier_list -> identifier_list COMMA ID
Rule 91    identifier_name -> ID

Terminals, with rules where they appear

AND                  : 35
ASSIGN               : 12
ASSIGN_PLUS          : 13
BACKSLASH            : 66
BACKSPACE_CHAR       : 67
BREAK                : 14
CARRIAGE_RETURN_CHAR : 70
COLON                : 81 82 85 86
COMMA                : 86 88 90
COMMENT_MULTILINE    : 
COMMENT_SINGLELINE   : 
CONTINUE             : 15
DO                   : 22
DOT                  : 28 50
ELSE                 : 26
EQ                   : 40
ESCAPE               : 65 66 67 68 69 70 71 72
FALSE                : 74
FOR                  : 21
FORM_FEED_CHAR       : 68
FUNC                 : 77 78 79 80
GEQ                  : 39
GT                   : 37
ID                   : 21 27 28 79 80 89 90 91
IF                   : 25 26
IN                   : 21
INT_LITERAL          : 58
LAMBDA               : 81 82
LBRACE               : 24 83 84
LBRACKET             : 29 47 75 76
LEQ                  : 38
LINE_FEED_CHAR       : 69
LPAREN               : 21 22 23 25 26 48 49 57 77 78 79 80
LT                   : 36
MINUS                : 33 45
NE                   : 41
NOT                  : 44
OR                   : 34
PLUS                 : 32
QUOTATION_MARK       : 61 61 65
RBRACE               : 24 83 84
RBRACKET             : 29 47 75 76
RETURN               : 16 17
RPAREN               : 21 22 23 25 26 48 49 57 77 78 79 80
SEMICOLON            : 12 13 14 15 16 17 22
STAR                 : 43
TAB_CHAR             : 71
TRUE                 : 73
UNESCAPED            : 64
UNICODE_HEX          : 72
WHILE                : 22 23
error                : 

Nonterminals, with rules where they appear

assignment_statement : 4
binary_expression    : 30 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 43 44 45
boolean_literal      : 60
break_statement      : 7
compound_statement   : 10 21 22 23 25 26 26 77 78 79 80
constant             : 53
continue_statement   : 8
dict_expression      : 56
do_loop_statement    : 19
expression           : 12 13 17 21 22 23 25 26 29 47 57 81 82 85 85 86 86 87 88
expression_list      : 48 76 88
for_loop_statement   : 18
function_decl_expression : 54
identifier_list      : 77 79 81 90
identifier_name      : 50 51
if_statement         : 6
key_value_list       : 84 86
lambda_expression    : 55
list_expression      : 52
loop_statement       : 5
lvalue               : 12 13 28 29
named_function_decl  : 11
postfix_expression   : 42 47 48 49 50
primary_expression   : 46
return_statement     : 9
script_file          : 0
statement            : 2 3
statement_list       : 1 3 24
string_char          : 63
string_chars         : 61 63
string_literal       : 59
unary_expression     : 31
while_loop_statement : 20

Parsing method: LALR

state 0

    (0) S' -> . script_file
    (1) script_file -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment_statement
    (5) statement -> . loop_statement
    (6) statement -> . if_statement
    (7) statement -> . break_statement
    (8) statement -> . continue_statement
    (9) statement -> . return_statement
    (10) statement -> . compound_statement
    (11) statement -> . named_function_decl
    (12) assignment_statement -> . lvalue ASSIGN expression SEMICOLON
    (13) assignment_statement -> . lvalue ASSIGN_PLUS expression SEMICOLON
    (18) loop_statement -> . for_loop_statement
    (19) loop_statement -> . do_loop_statement
    (20) loop_statement -> . while_loop_statement
    (25) if_statement -> . IF LPAREN expression RPAREN compound_statement
    (26) if_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (14) break_statement -> . BREAK SEMICOLON
    (15) continue_statement -> . CONTINUE SEMICOLON
    (16) return_statement -> . RETURN SEMICOLON
    (17) return_statement -> . RETURN expression SEMICOLON
    (24) compound_statement -> . LBRACE statement_list RBRACE
    (79) named_function_decl -> . FUNC ID LPAREN identifier_list RPAREN compound_statement
    (80) named_function_decl -> . FUNC ID LPAREN RPAREN compound_statement
    (27) lvalue -> . ID
    (28) lvalue -> . lvalue DOT ID
    (29) lvalue -> . lvalue LBRACKET expression RBRACKET
    (21) for_loop_statement -> . FOR LPAREN ID IN expression RPAREN compound_statement
    (22) do_loop_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (23) while_loop_statement -> . WHILE LPAREN expression RPAREN compound_statement

    IF              shift and go to state 19
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 2
    LBRACE          shift and go to state 20
    FUNC            shift and go to state 3
    ID              shift and go to state 18
    FOR             shift and go to state 17
    DO              shift and go to state 1
    WHILE           shift and go to state 6

    return_statement               shift and go to state 12
    while_loop_statement           shift and go to state 8
    do_loop_statement              shift and go to state 7
    loop_statement                 shift and go to state 4
    compound_statement             shift and go to state 9
    lvalue                         shift and go to state 10
    for_loop_statement             shift and go to state 21
    assignment_statement           shift and go to state 11
    break_statement                shift and go to state 5
    continue_statement             shift and go to state 13
    statement                      shift and go to state 14
    statement_list                 shift and go to state 25
    named_function_decl            shift and go to state 15
    if_statement                   shift and go to state 16
    script_file                    shift and go to state 22

state 1

    (22) do_loop_statement -> DO . compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (24) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 20

    compound_statement             shift and go to state 26

state 2

    (16) return_statement -> RETURN . SEMICOLON
    (17) return_statement -> RETURN . expression SEMICOLON
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    SEMICOLON       shift and go to state 37
    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 51
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 3

    (79) named_function_decl -> FUNC . ID LPAREN identifier_list RPAREN compound_statement
    (80) named_function_decl -> FUNC . ID LPAREN RPAREN compound_statement

    ID              shift and go to state 54


state 4

    (5) statement -> loop_statement .

    IF              reduce using rule 5 (statement -> loop_statement .)
    BREAK           reduce using rule 5 (statement -> loop_statement .)
    CONTINUE        reduce using rule 5 (statement -> loop_statement .)
    RETURN          reduce using rule 5 (statement -> loop_statement .)
    LBRACE          reduce using rule 5 (statement -> loop_statement .)
    FUNC            reduce using rule 5 (statement -> loop_statement .)
    ID              reduce using rule 5 (statement -> loop_statement .)
    FOR             reduce using rule 5 (statement -> loop_statement .)
    DO              reduce using rule 5 (statement -> loop_statement .)
    WHILE           reduce using rule 5 (statement -> loop_statement .)
    $end            reduce using rule 5 (statement -> loop_statement .)
    RBRACE          reduce using rule 5 (statement -> loop_statement .)


state 5

    (7) statement -> break_statement .

    IF              reduce using rule 7 (statement -> break_statement .)
    BREAK           reduce using rule 7 (statement -> break_statement .)
    CONTINUE        reduce using rule 7 (statement -> break_statement .)
    RETURN          reduce using rule 7 (statement -> break_statement .)
    LBRACE          reduce using rule 7 (statement -> break_statement .)
    FUNC            reduce using rule 7 (statement -> break_statement .)
    ID              reduce using rule 7 (statement -> break_statement .)
    FOR             reduce using rule 7 (statement -> break_statement .)
    DO              reduce using rule 7 (statement -> break_statement .)
    WHILE           reduce using rule 7 (statement -> break_statement .)
    $end            reduce using rule 7 (statement -> break_statement .)
    RBRACE          reduce using rule 7 (statement -> break_statement .)


state 6

    (23) while_loop_statement -> WHILE . LPAREN expression RPAREN compound_statement

    LPAREN          shift and go to state 55


state 7

    (19) loop_statement -> do_loop_statement .

    IF              reduce using rule 19 (loop_statement -> do_loop_statement .)
    BREAK           reduce using rule 19 (loop_statement -> do_loop_statement .)
    CONTINUE        reduce using rule 19 (loop_statement -> do_loop_statement .)
    RETURN          reduce using rule 19 (loop_statement -> do_loop_statement .)
    LBRACE          reduce using rule 19 (loop_statement -> do_loop_statement .)
    FUNC            reduce using rule 19 (loop_statement -> do_loop_statement .)
    ID              reduce using rule 19 (loop_statement -> do_loop_statement .)
    FOR             reduce using rule 19 (loop_statement -> do_loop_statement .)
    DO              reduce using rule 19 (loop_statement -> do_loop_statement .)
    WHILE           reduce using rule 19 (loop_statement -> do_loop_statement .)
    $end            reduce using rule 19 (loop_statement -> do_loop_statement .)
    RBRACE          reduce using rule 19 (loop_statement -> do_loop_statement .)


state 8

    (20) loop_statement -> while_loop_statement .

    IF              reduce using rule 20 (loop_statement -> while_loop_statement .)
    BREAK           reduce using rule 20 (loop_statement -> while_loop_statement .)
    CONTINUE        reduce using rule 20 (loop_statement -> while_loop_statement .)
    RETURN          reduce using rule 20 (loop_statement -> while_loop_statement .)
    LBRACE          reduce using rule 20 (loop_statement -> while_loop_statement .)
    FUNC            reduce using rule 20 (loop_statement -> while_loop_statement .)
    ID              reduce using rule 20 (loop_statement -> while_loop_statement .)
    FOR             reduce using rule 20 (loop_statement -> while_loop_statement .)
    DO              reduce using rule 20 (loop_statement -> while_loop_statement .)
    WHILE           reduce using rule 20 (loop_statement -> while_loop_statement .)
    $end            reduce using rule 20 (loop_statement -> while_loop_statement .)
    RBRACE          reduce using rule 20 (loop_statement -> while_loop_statement .)


state 9

    (10) statement -> compound_statement .

    IF              reduce using rule 10 (statement -> compound_statement .)
    BREAK           reduce using rule 10 (statement -> compound_statement .)
    CONTINUE        reduce using rule 10 (statement -> compound_statement .)
    RETURN          reduce using rule 10 (statement -> compound_statement .)
    LBRACE          reduce using rule 10 (statement -> compound_statement .)
    FUNC            reduce using rule 10 (statement -> compound_statement .)
    ID              reduce using rule 10 (statement -> compound_statement .)
    FOR             reduce using rule 10 (statement -> compound_statement .)
    DO              reduce using rule 10 (statement -> compound_statement .)
    WHILE           reduce using rule 10 (statement -> compound_statement .)
    $end            reduce using rule 10 (statement -> compound_statement .)
    RBRACE          reduce using rule 10 (statement -> compound_statement .)


state 10

    (12) assignment_statement -> lvalue . ASSIGN expression SEMICOLON
    (13) assignment_statement -> lvalue . ASSIGN_PLUS expression SEMICOLON
    (28) lvalue -> lvalue . DOT ID
    (29) lvalue -> lvalue . LBRACKET expression RBRACKET

    ASSIGN          shift and go to state 58
    ASSIGN_PLUS     shift and go to state 56
    DOT             shift and go to state 59
    LBRACKET        shift and go to state 57


state 11

    (4) statement -> assignment_statement .

    IF              reduce using rule 4 (statement -> assignment_statement .)
    BREAK           reduce using rule 4 (statement -> assignment_statement .)
    CONTINUE        reduce using rule 4 (statement -> assignment_statement .)
    RETURN          reduce using rule 4 (statement -> assignment_statement .)
    LBRACE          reduce using rule 4 (statement -> assignment_statement .)
    FUNC            reduce using rule 4 (statement -> assignment_statement .)
    ID              reduce using rule 4 (statement -> assignment_statement .)
    FOR             reduce using rule 4 (statement -> assignment_statement .)
    DO              reduce using rule 4 (statement -> assignment_statement .)
    WHILE           reduce using rule 4 (statement -> assignment_statement .)
    $end            reduce using rule 4 (statement -> assignment_statement .)
    RBRACE          reduce using rule 4 (statement -> assignment_statement .)


state 12

    (9) statement -> return_statement .

    IF              reduce using rule 9 (statement -> return_statement .)
    BREAK           reduce using rule 9 (statement -> return_statement .)
    CONTINUE        reduce using rule 9 (statement -> return_statement .)
    RETURN          reduce using rule 9 (statement -> return_statement .)
    LBRACE          reduce using rule 9 (statement -> return_statement .)
    FUNC            reduce using rule 9 (statement -> return_statement .)
    ID              reduce using rule 9 (statement -> return_statement .)
    FOR             reduce using rule 9 (statement -> return_statement .)
    DO              reduce using rule 9 (statement -> return_statement .)
    WHILE           reduce using rule 9 (statement -> return_statement .)
    $end            reduce using rule 9 (statement -> return_statement .)
    RBRACE          reduce using rule 9 (statement -> return_statement .)


state 13

    (8) statement -> continue_statement .

    IF              reduce using rule 8 (statement -> continue_statement .)
    BREAK           reduce using rule 8 (statement -> continue_statement .)
    CONTINUE        reduce using rule 8 (statement -> continue_statement .)
    RETURN          reduce using rule 8 (statement -> continue_statement .)
    LBRACE          reduce using rule 8 (statement -> continue_statement .)
    FUNC            reduce using rule 8 (statement -> continue_statement .)
    ID              reduce using rule 8 (statement -> continue_statement .)
    FOR             reduce using rule 8 (statement -> continue_statement .)
    DO              reduce using rule 8 (statement -> continue_statement .)
    WHILE           reduce using rule 8 (statement -> continue_statement .)
    $end            reduce using rule 8 (statement -> continue_statement .)
    RBRACE          reduce using rule 8 (statement -> continue_statement .)


state 14

    (2) statement_list -> statement .

    RBRACE          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    BREAK           reduce using rule 2 (statement_list -> statement .)
    CONTINUE        reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    LBRACE          reduce using rule 2 (statement_list -> statement .)
    FUNC            reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    FOR             reduce using rule 2 (statement_list -> statement .)
    DO              reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 15

    (11) statement -> named_function_decl .

    IF              reduce using rule 11 (statement -> named_function_decl .)
    BREAK           reduce using rule 11 (statement -> named_function_decl .)
    CONTINUE        reduce using rule 11 (statement -> named_function_decl .)
    RETURN          reduce using rule 11 (statement -> named_function_decl .)
    LBRACE          reduce using rule 11 (statement -> named_function_decl .)
    FUNC            reduce using rule 11 (statement -> named_function_decl .)
    ID              reduce using rule 11 (statement -> named_function_decl .)
    FOR             reduce using rule 11 (statement -> named_function_decl .)
    DO              reduce using rule 11 (statement -> named_function_decl .)
    WHILE           reduce using rule 11 (statement -> named_function_decl .)
    $end            reduce using rule 11 (statement -> named_function_decl .)
    RBRACE          reduce using rule 11 (statement -> named_function_decl .)


state 16

    (6) statement -> if_statement .

    IF              reduce using rule 6 (statement -> if_statement .)
    BREAK           reduce using rule 6 (statement -> if_statement .)
    CONTINUE        reduce using rule 6 (statement -> if_statement .)
    RETURN          reduce using rule 6 (statement -> if_statement .)
    LBRACE          reduce using rule 6 (statement -> if_statement .)
    FUNC            reduce using rule 6 (statement -> if_statement .)
    ID              reduce using rule 6 (statement -> if_statement .)
    FOR             reduce using rule 6 (statement -> if_statement .)
    DO              reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACE          reduce using rule 6 (statement -> if_statement .)


state 17

    (21) for_loop_statement -> FOR . LPAREN ID IN expression RPAREN compound_statement

    LPAREN          shift and go to state 60


state 18

    (27) lvalue -> ID .

    ASSIGN          reduce using rule 27 (lvalue -> ID .)
    ASSIGN_PLUS     reduce using rule 27 (lvalue -> ID .)
    DOT             reduce using rule 27 (lvalue -> ID .)
    LBRACKET        reduce using rule 27 (lvalue -> ID .)


state 19

    (25) if_statement -> IF . LPAREN expression RPAREN compound_statement
    (26) if_statement -> IF . LPAREN expression RPAREN compound_statement ELSE compound_statement

    LPAREN          shift and go to state 61


state 20

    (24) compound_statement -> LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment_statement
    (5) statement -> . loop_statement
    (6) statement -> . if_statement
    (7) statement -> . break_statement
    (8) statement -> . continue_statement
    (9) statement -> . return_statement
    (10) statement -> . compound_statement
    (11) statement -> . named_function_decl
    (12) assignment_statement -> . lvalue ASSIGN expression SEMICOLON
    (13) assignment_statement -> . lvalue ASSIGN_PLUS expression SEMICOLON
    (18) loop_statement -> . for_loop_statement
    (19) loop_statement -> . do_loop_statement
    (20) loop_statement -> . while_loop_statement
    (25) if_statement -> . IF LPAREN expression RPAREN compound_statement
    (26) if_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (14) break_statement -> . BREAK SEMICOLON
    (15) continue_statement -> . CONTINUE SEMICOLON
    (16) return_statement -> . RETURN SEMICOLON
    (17) return_statement -> . RETURN expression SEMICOLON
    (24) compound_statement -> . LBRACE statement_list RBRACE
    (79) named_function_decl -> . FUNC ID LPAREN identifier_list RPAREN compound_statement
    (80) named_function_decl -> . FUNC ID LPAREN RPAREN compound_statement
    (27) lvalue -> . ID
    (28) lvalue -> . lvalue DOT ID
    (29) lvalue -> . lvalue LBRACKET expression RBRACKET
    (21) for_loop_statement -> . FOR LPAREN ID IN expression RPAREN compound_statement
    (22) do_loop_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (23) while_loop_statement -> . WHILE LPAREN expression RPAREN compound_statement

    IF              shift and go to state 19
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 2
    LBRACE          shift and go to state 20
    FUNC            shift and go to state 3
    ID              shift and go to state 18
    FOR             shift and go to state 17
    DO              shift and go to state 1
    WHILE           shift and go to state 6

    return_statement               shift and go to state 12
    while_loop_statement           shift and go to state 8
    do_loop_statement              shift and go to state 7
    loop_statement                 shift and go to state 4
    compound_statement             shift and go to state 9
    lvalue                         shift and go to state 10
    for_loop_statement             shift and go to state 21
    assignment_statement           shift and go to state 11
    break_statement                shift and go to state 5
    continue_statement             shift and go to state 13
    statement                      shift and go to state 14
    statement_list                 shift and go to state 62
    named_function_decl            shift and go to state 15
    if_statement                   shift and go to state 16

state 21

    (18) loop_statement -> for_loop_statement .

    IF              reduce using rule 18 (loop_statement -> for_loop_statement .)
    BREAK           reduce using rule 18 (loop_statement -> for_loop_statement .)
    CONTINUE        reduce using rule 18 (loop_statement -> for_loop_statement .)
    RETURN          reduce using rule 18 (loop_statement -> for_loop_statement .)
    LBRACE          reduce using rule 18 (loop_statement -> for_loop_statement .)
    FUNC            reduce using rule 18 (loop_statement -> for_loop_statement .)
    ID              reduce using rule 18 (loop_statement -> for_loop_statement .)
    FOR             reduce using rule 18 (loop_statement -> for_loop_statement .)
    DO              reduce using rule 18 (loop_statement -> for_loop_statement .)
    WHILE           reduce using rule 18 (loop_statement -> for_loop_statement .)
    $end            reduce using rule 18 (loop_statement -> for_loop_statement .)
    RBRACE          reduce using rule 18 (loop_statement -> for_loop_statement .)


state 22

    (0) S' -> script_file .



state 23

    (14) break_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 63


state 24

    (15) continue_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 64


state 25

    (1) script_file -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment_statement
    (5) statement -> . loop_statement
    (6) statement -> . if_statement
    (7) statement -> . break_statement
    (8) statement -> . continue_statement
    (9) statement -> . return_statement
    (10) statement -> . compound_statement
    (11) statement -> . named_function_decl
    (12) assignment_statement -> . lvalue ASSIGN expression SEMICOLON
    (13) assignment_statement -> . lvalue ASSIGN_PLUS expression SEMICOLON
    (18) loop_statement -> . for_loop_statement
    (19) loop_statement -> . do_loop_statement
    (20) loop_statement -> . while_loop_statement
    (25) if_statement -> . IF LPAREN expression RPAREN compound_statement
    (26) if_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (14) break_statement -> . BREAK SEMICOLON
    (15) continue_statement -> . CONTINUE SEMICOLON
    (16) return_statement -> . RETURN SEMICOLON
    (17) return_statement -> . RETURN expression SEMICOLON
    (24) compound_statement -> . LBRACE statement_list RBRACE
    (79) named_function_decl -> . FUNC ID LPAREN identifier_list RPAREN compound_statement
    (80) named_function_decl -> . FUNC ID LPAREN RPAREN compound_statement
    (27) lvalue -> . ID
    (28) lvalue -> . lvalue DOT ID
    (29) lvalue -> . lvalue LBRACKET expression RBRACKET
    (21) for_loop_statement -> . FOR LPAREN ID IN expression RPAREN compound_statement
    (22) do_loop_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (23) while_loop_statement -> . WHILE LPAREN expression RPAREN compound_statement

    $end            reduce using rule 1 (script_file -> statement_list .)
    IF              shift and go to state 19
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 2
    LBRACE          shift and go to state 20
    FUNC            shift and go to state 3
    ID              shift and go to state 18
    FOR             shift and go to state 17
    DO              shift and go to state 1
    WHILE           shift and go to state 6

    return_statement               shift and go to state 12
    while_loop_statement           shift and go to state 8
    do_loop_statement              shift and go to state 7
    loop_statement                 shift and go to state 4
    compound_statement             shift and go to state 9
    lvalue                         shift and go to state 10
    for_loop_statement             shift and go to state 21
    assignment_statement           shift and go to state 11
    break_statement                shift and go to state 5
    continue_statement             shift and go to state 13
    statement                      shift and go to state 65
    named_function_decl            shift and go to state 15
    if_statement                   shift and go to state 16

state 26

    (22) do_loop_statement -> DO compound_statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 66


state 27

    (77) function_decl_expression -> FUNC . LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> FUNC . LPAREN RPAREN compound_statement

    LPAREN          shift and go to state 67


state 28

    (31) binary_expression -> unary_expression .

    PLUS            reduce using rule 31 (binary_expression -> unary_expression .)
    MINUS           reduce using rule 31 (binary_expression -> unary_expression .)
    OR              reduce using rule 31 (binary_expression -> unary_expression .)
    AND             reduce using rule 31 (binary_expression -> unary_expression .)
    LT              reduce using rule 31 (binary_expression -> unary_expression .)
    GT              reduce using rule 31 (binary_expression -> unary_expression .)
    LEQ             reduce using rule 31 (binary_expression -> unary_expression .)
    GEQ             reduce using rule 31 (binary_expression -> unary_expression .)
    EQ              reduce using rule 31 (binary_expression -> unary_expression .)
    NE              reduce using rule 31 (binary_expression -> unary_expression .)
    RPAREN          reduce using rule 31 (binary_expression -> unary_expression .)
    SEMICOLON       reduce using rule 31 (binary_expression -> unary_expression .)
    RBRACKET        reduce using rule 31 (binary_expression -> unary_expression .)
    COMMA           reduce using rule 31 (binary_expression -> unary_expression .)
    COLON           reduce using rule 31 (binary_expression -> unary_expression .)
    LBRACKET        reduce using rule 31 (binary_expression -> unary_expression .)
    LPAREN          reduce using rule 31 (binary_expression -> unary_expression .)
    DOT             reduce using rule 31 (binary_expression -> unary_expression .)
    RBRACE          reduce using rule 31 (binary_expression -> unary_expression .)


state 29

    (55) primary_expression -> lambda_expression .

    LBRACKET        reduce using rule 55 (primary_expression -> lambda_expression .)
    LPAREN          reduce using rule 55 (primary_expression -> lambda_expression .)
    DOT             reduce using rule 55 (primary_expression -> lambda_expression .)
    PLUS            reduce using rule 55 (primary_expression -> lambda_expression .)
    MINUS           reduce using rule 55 (primary_expression -> lambda_expression .)
    OR              reduce using rule 55 (primary_expression -> lambda_expression .)
    AND             reduce using rule 55 (primary_expression -> lambda_expression .)
    LT              reduce using rule 55 (primary_expression -> lambda_expression .)
    GT              reduce using rule 55 (primary_expression -> lambda_expression .)
    LEQ             reduce using rule 55 (primary_expression -> lambda_expression .)
    GEQ             reduce using rule 55 (primary_expression -> lambda_expression .)
    EQ              reduce using rule 55 (primary_expression -> lambda_expression .)
    NE              reduce using rule 55 (primary_expression -> lambda_expression .)
    RPAREN          reduce using rule 55 (primary_expression -> lambda_expression .)
    SEMICOLON       reduce using rule 55 (primary_expression -> lambda_expression .)
    RBRACKET        reduce using rule 55 (primary_expression -> lambda_expression .)
    COMMA           reduce using rule 55 (primary_expression -> lambda_expression .)
    COLON           reduce using rule 55 (primary_expression -> lambda_expression .)
    RBRACE          reduce using rule 55 (primary_expression -> lambda_expression .)


state 30

    (60) constant -> boolean_literal .

    PLUS            reduce using rule 60 (constant -> boolean_literal .)
    MINUS           reduce using rule 60 (constant -> boolean_literal .)
    OR              reduce using rule 60 (constant -> boolean_literal .)
    AND             reduce using rule 60 (constant -> boolean_literal .)
    LT              reduce using rule 60 (constant -> boolean_literal .)
    GT              reduce using rule 60 (constant -> boolean_literal .)
    LEQ             reduce using rule 60 (constant -> boolean_literal .)
    GEQ             reduce using rule 60 (constant -> boolean_literal .)
    EQ              reduce using rule 60 (constant -> boolean_literal .)
    NE              reduce using rule 60 (constant -> boolean_literal .)
    SEMICOLON       reduce using rule 60 (constant -> boolean_literal .)
    RBRACKET        reduce using rule 60 (constant -> boolean_literal .)
    COMMA           reduce using rule 60 (constant -> boolean_literal .)
    RPAREN          reduce using rule 60 (constant -> boolean_literal .)
    COLON           reduce using rule 60 (constant -> boolean_literal .)
    LBRACKET        reduce using rule 60 (constant -> boolean_literal .)
    LPAREN          reduce using rule 60 (constant -> boolean_literal .)
    DOT             reduce using rule 60 (constant -> boolean_literal .)
    RBRACE          reduce using rule 60 (constant -> boolean_literal .)


state 31

    (75) list_expression -> LBRACKET . RBRACKET
    (76) list_expression -> LBRACKET . expression_list RBRACKET
    (87) expression_list -> . expression
    (88) expression_list -> . expression_list COMMA expression
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    RBRACKET        shift and go to state 69
    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    expression_list                shift and go to state 68
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 70
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 32

    (61) string_literal -> QUOTATION_MARK . string_chars QUOTATION_MARK
    (62) string_chars -> .
    (63) string_chars -> . string_chars string_char

    QUOTATION_MARK  reduce using rule 62 (string_chars -> .)
    UNESCAPED       reduce using rule 62 (string_chars -> .)
    ESCAPE          reduce using rule 62 (string_chars -> .)

    string_chars                   shift and go to state 71

state 33

    (43) unary_expression -> STAR . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 72
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 34

    (51) primary_expression -> identifier_name .

    LBRACKET        reduce using rule 51 (primary_expression -> identifier_name .)
    LPAREN          reduce using rule 51 (primary_expression -> identifier_name .)
    DOT             reduce using rule 51 (primary_expression -> identifier_name .)
    PLUS            reduce using rule 51 (primary_expression -> identifier_name .)
    MINUS           reduce using rule 51 (primary_expression -> identifier_name .)
    OR              reduce using rule 51 (primary_expression -> identifier_name .)
    AND             reduce using rule 51 (primary_expression -> identifier_name .)
    LT              reduce using rule 51 (primary_expression -> identifier_name .)
    GT              reduce using rule 51 (primary_expression -> identifier_name .)
    LEQ             reduce using rule 51 (primary_expression -> identifier_name .)
    GEQ             reduce using rule 51 (primary_expression -> identifier_name .)
    EQ              reduce using rule 51 (primary_expression -> identifier_name .)
    NE              reduce using rule 51 (primary_expression -> identifier_name .)
    RPAREN          reduce using rule 51 (primary_expression -> identifier_name .)
    SEMICOLON       reduce using rule 51 (primary_expression -> identifier_name .)
    RBRACKET        reduce using rule 51 (primary_expression -> identifier_name .)
    COMMA           reduce using rule 51 (primary_expression -> identifier_name .)
    COLON           reduce using rule 51 (primary_expression -> identifier_name .)
    RBRACE          reduce using rule 51 (primary_expression -> identifier_name .)


state 35

    (73) boolean_literal -> TRUE .

    PLUS            reduce using rule 73 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 73 (boolean_literal -> TRUE .)
    OR              reduce using rule 73 (boolean_literal -> TRUE .)
    AND             reduce using rule 73 (boolean_literal -> TRUE .)
    LT              reduce using rule 73 (boolean_literal -> TRUE .)
    GT              reduce using rule 73 (boolean_literal -> TRUE .)
    LEQ             reduce using rule 73 (boolean_literal -> TRUE .)
    GEQ             reduce using rule 73 (boolean_literal -> TRUE .)
    EQ              reduce using rule 73 (boolean_literal -> TRUE .)
    NE              reduce using rule 73 (boolean_literal -> TRUE .)
    SEMICOLON       reduce using rule 73 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 73 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 73 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 73 (boolean_literal -> TRUE .)
    COLON           reduce using rule 73 (boolean_literal -> TRUE .)
    LBRACKET        reduce using rule 73 (boolean_literal -> TRUE .)
    LPAREN          reduce using rule 73 (boolean_literal -> TRUE .)
    DOT             reduce using rule 73 (boolean_literal -> TRUE .)
    RBRACE          reduce using rule 73 (boolean_literal -> TRUE .)


state 36

    (45) unary_expression -> MINUS . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 73
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 37

    (16) return_statement -> RETURN SEMICOLON .

    IF              reduce using rule 16 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 16 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 16 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 16 (return_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 16 (return_statement -> RETURN SEMICOLON .)
    FUNC            reduce using rule 16 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 16 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 16 (return_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 16 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 16 (return_statement -> RETURN SEMICOLON .)
    $end            reduce using rule 16 (return_statement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 16 (return_statement -> RETURN SEMICOLON .)


state 38

    (42) unary_expression -> postfix_expression .
    (47) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (48) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (49) postfix_expression -> postfix_expression . LPAREN RPAREN
    (50) postfix_expression -> postfix_expression . DOT identifier_name

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    PLUS            reduce using rule 42 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 42 (unary_expression -> postfix_expression .)
    OR              reduce using rule 42 (unary_expression -> postfix_expression .)
    AND             reduce using rule 42 (unary_expression -> postfix_expression .)
    LT              reduce using rule 42 (unary_expression -> postfix_expression .)
    GT              reduce using rule 42 (unary_expression -> postfix_expression .)
    LEQ             reduce using rule 42 (unary_expression -> postfix_expression .)
    GEQ             reduce using rule 42 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 42 (unary_expression -> postfix_expression .)
    NE              reduce using rule 42 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 42 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 42 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 42 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 42 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 42 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 42 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 74
    LPAREN          shift and go to state 75
    DOT             shift and go to state 76

  ! LBRACKET        [ reduce using rule 42 (unary_expression -> postfix_expression .) ]
  ! LPAREN          [ reduce using rule 42 (unary_expression -> postfix_expression .) ]
  ! DOT             [ reduce using rule 42 (unary_expression -> postfix_expression .) ]


state 39

    (53) primary_expression -> constant .

    LBRACKET        reduce using rule 53 (primary_expression -> constant .)
    LPAREN          reduce using rule 53 (primary_expression -> constant .)
    DOT             reduce using rule 53 (primary_expression -> constant .)
    PLUS            reduce using rule 53 (primary_expression -> constant .)
    MINUS           reduce using rule 53 (primary_expression -> constant .)
    OR              reduce using rule 53 (primary_expression -> constant .)
    AND             reduce using rule 53 (primary_expression -> constant .)
    LT              reduce using rule 53 (primary_expression -> constant .)
    GT              reduce using rule 53 (primary_expression -> constant .)
    LEQ             reduce using rule 53 (primary_expression -> constant .)
    GEQ             reduce using rule 53 (primary_expression -> constant .)
    EQ              reduce using rule 53 (primary_expression -> constant .)
    NE              reduce using rule 53 (primary_expression -> constant .)
    RPAREN          reduce using rule 53 (primary_expression -> constant .)
    SEMICOLON       reduce using rule 53 (primary_expression -> constant .)
    RBRACKET        reduce using rule 53 (primary_expression -> constant .)
    COMMA           reduce using rule 53 (primary_expression -> constant .)
    COLON           reduce using rule 53 (primary_expression -> constant .)
    RBRACE          reduce using rule 53 (primary_expression -> constant .)


state 40

    (59) constant -> string_literal .

    PLUS            reduce using rule 59 (constant -> string_literal .)
    MINUS           reduce using rule 59 (constant -> string_literal .)
    OR              reduce using rule 59 (constant -> string_literal .)
    AND             reduce using rule 59 (constant -> string_literal .)
    LT              reduce using rule 59 (constant -> string_literal .)
    GT              reduce using rule 59 (constant -> string_literal .)
    LEQ             reduce using rule 59 (constant -> string_literal .)
    GEQ             reduce using rule 59 (constant -> string_literal .)
    EQ              reduce using rule 59 (constant -> string_literal .)
    NE              reduce using rule 59 (constant -> string_literal .)
    SEMICOLON       reduce using rule 59 (constant -> string_literal .)
    RBRACKET        reduce using rule 59 (constant -> string_literal .)
    COMMA           reduce using rule 59 (constant -> string_literal .)
    RPAREN          reduce using rule 59 (constant -> string_literal .)
    COLON           reduce using rule 59 (constant -> string_literal .)
    LBRACKET        reduce using rule 59 (constant -> string_literal .)
    LPAREN          reduce using rule 59 (constant -> string_literal .)
    DOT             reduce using rule 59 (constant -> string_literal .)
    RBRACE          reduce using rule 59 (constant -> string_literal .)


state 41

    (52) primary_expression -> list_expression .

    LBRACKET        reduce using rule 52 (primary_expression -> list_expression .)
    LPAREN          reduce using rule 52 (primary_expression -> list_expression .)
    DOT             reduce using rule 52 (primary_expression -> list_expression .)
    PLUS            reduce using rule 52 (primary_expression -> list_expression .)
    MINUS           reduce using rule 52 (primary_expression -> list_expression .)
    OR              reduce using rule 52 (primary_expression -> list_expression .)
    AND             reduce using rule 52 (primary_expression -> list_expression .)
    LT              reduce using rule 52 (primary_expression -> list_expression .)
    GT              reduce using rule 52 (primary_expression -> list_expression .)
    LEQ             reduce using rule 52 (primary_expression -> list_expression .)
    GEQ             reduce using rule 52 (primary_expression -> list_expression .)
    EQ              reduce using rule 52 (primary_expression -> list_expression .)
    NE              reduce using rule 52 (primary_expression -> list_expression .)
    RPAREN          reduce using rule 52 (primary_expression -> list_expression .)
    SEMICOLON       reduce using rule 52 (primary_expression -> list_expression .)
    RBRACKET        reduce using rule 52 (primary_expression -> list_expression .)
    COMMA           reduce using rule 52 (primary_expression -> list_expression .)
    COLON           reduce using rule 52 (primary_expression -> list_expression .)
    RBRACE          reduce using rule 52 (primary_expression -> list_expression .)


state 42

    (58) constant -> INT_LITERAL .

    PLUS            reduce using rule 58 (constant -> INT_LITERAL .)
    MINUS           reduce using rule 58 (constant -> INT_LITERAL .)
    OR              reduce using rule 58 (constant -> INT_LITERAL .)
    AND             reduce using rule 58 (constant -> INT_LITERAL .)
    LT              reduce using rule 58 (constant -> INT_LITERAL .)
    GT              reduce using rule 58 (constant -> INT_LITERAL .)
    LEQ             reduce using rule 58 (constant -> INT_LITERAL .)
    GEQ             reduce using rule 58 (constant -> INT_LITERAL .)
    EQ              reduce using rule 58 (constant -> INT_LITERAL .)
    NE              reduce using rule 58 (constant -> INT_LITERAL .)
    SEMICOLON       reduce using rule 58 (constant -> INT_LITERAL .)
    RBRACKET        reduce using rule 58 (constant -> INT_LITERAL .)
    COMMA           reduce using rule 58 (constant -> INT_LITERAL .)
    RPAREN          reduce using rule 58 (constant -> INT_LITERAL .)
    COLON           reduce using rule 58 (constant -> INT_LITERAL .)
    LBRACKET        reduce using rule 58 (constant -> INT_LITERAL .)
    LPAREN          reduce using rule 58 (constant -> INT_LITERAL .)
    DOT             reduce using rule 58 (constant -> INT_LITERAL .)
    RBRACE          reduce using rule 58 (constant -> INT_LITERAL .)


state 43

    (46) postfix_expression -> primary_expression .

    PLUS            reduce using rule 46 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 46 (postfix_expression -> primary_expression .)
    OR              reduce using rule 46 (postfix_expression -> primary_expression .)
    AND             reduce using rule 46 (postfix_expression -> primary_expression .)
    LT              reduce using rule 46 (postfix_expression -> primary_expression .)
    GT              reduce using rule 46 (postfix_expression -> primary_expression .)
    LEQ             reduce using rule 46 (postfix_expression -> primary_expression .)
    GEQ             reduce using rule 46 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 46 (postfix_expression -> primary_expression .)
    NE              reduce using rule 46 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 46 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 46 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 46 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 46 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 46 (postfix_expression -> primary_expression .)
    LBRACKET        reduce using rule 46 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 46 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 46 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 46 (postfix_expression -> primary_expression .)


state 44

    (57) primary_expression -> LPAREN . expression RPAREN
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 77
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 45

    (54) primary_expression -> function_decl_expression .

    LBRACKET        reduce using rule 54 (primary_expression -> function_decl_expression .)
    LPAREN          reduce using rule 54 (primary_expression -> function_decl_expression .)
    DOT             reduce using rule 54 (primary_expression -> function_decl_expression .)
    PLUS            reduce using rule 54 (primary_expression -> function_decl_expression .)
    MINUS           reduce using rule 54 (primary_expression -> function_decl_expression .)
    OR              reduce using rule 54 (primary_expression -> function_decl_expression .)
    AND             reduce using rule 54 (primary_expression -> function_decl_expression .)
    LT              reduce using rule 54 (primary_expression -> function_decl_expression .)
    GT              reduce using rule 54 (primary_expression -> function_decl_expression .)
    LEQ             reduce using rule 54 (primary_expression -> function_decl_expression .)
    GEQ             reduce using rule 54 (primary_expression -> function_decl_expression .)
    EQ              reduce using rule 54 (primary_expression -> function_decl_expression .)
    NE              reduce using rule 54 (primary_expression -> function_decl_expression .)
    RPAREN          reduce using rule 54 (primary_expression -> function_decl_expression .)
    SEMICOLON       reduce using rule 54 (primary_expression -> function_decl_expression .)
    RBRACKET        reduce using rule 54 (primary_expression -> function_decl_expression .)
    COMMA           reduce using rule 54 (primary_expression -> function_decl_expression .)
    COLON           reduce using rule 54 (primary_expression -> function_decl_expression .)
    RBRACE          reduce using rule 54 (primary_expression -> function_decl_expression .)


state 46

    (91) identifier_name -> ID .

    LBRACKET        reduce using rule 91 (identifier_name -> ID .)
    LPAREN          reduce using rule 91 (identifier_name -> ID .)
    DOT             reduce using rule 91 (identifier_name -> ID .)
    PLUS            reduce using rule 91 (identifier_name -> ID .)
    MINUS           reduce using rule 91 (identifier_name -> ID .)
    OR              reduce using rule 91 (identifier_name -> ID .)
    AND             reduce using rule 91 (identifier_name -> ID .)
    LT              reduce using rule 91 (identifier_name -> ID .)
    GT              reduce using rule 91 (identifier_name -> ID .)
    LEQ             reduce using rule 91 (identifier_name -> ID .)
    GEQ             reduce using rule 91 (identifier_name -> ID .)
    EQ              reduce using rule 91 (identifier_name -> ID .)
    NE              reduce using rule 91 (identifier_name -> ID .)
    RPAREN          reduce using rule 91 (identifier_name -> ID .)
    SEMICOLON       reduce using rule 91 (identifier_name -> ID .)
    RBRACKET        reduce using rule 91 (identifier_name -> ID .)
    COMMA           reduce using rule 91 (identifier_name -> ID .)
    COLON           reduce using rule 91 (identifier_name -> ID .)
    RBRACE          reduce using rule 91 (identifier_name -> ID .)


state 47

    (83) dict_expression -> LBRACE . RBRACE
    (84) dict_expression -> LBRACE . key_value_list RBRACE
    (85) key_value_list -> . expression COLON expression
    (86) key_value_list -> . key_value_list COMMA expression COLON expression
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    RBRACE          shift and go to state 78
    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    list_expression                shift and go to state 41
    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    key_value_list                 shift and go to state 79
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 80
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 48

    (74) boolean_literal -> FALSE .

    PLUS            reduce using rule 74 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 74 (boolean_literal -> FALSE .)
    OR              reduce using rule 74 (boolean_literal -> FALSE .)
    AND             reduce using rule 74 (boolean_literal -> FALSE .)
    LT              reduce using rule 74 (boolean_literal -> FALSE .)
    GT              reduce using rule 74 (boolean_literal -> FALSE .)
    LEQ             reduce using rule 74 (boolean_literal -> FALSE .)
    GEQ             reduce using rule 74 (boolean_literal -> FALSE .)
    EQ              reduce using rule 74 (boolean_literal -> FALSE .)
    NE              reduce using rule 74 (boolean_literal -> FALSE .)
    SEMICOLON       reduce using rule 74 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 74 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 74 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 74 (boolean_literal -> FALSE .)
    COLON           reduce using rule 74 (boolean_literal -> FALSE .)
    LBRACKET        reduce using rule 74 (boolean_literal -> FALSE .)
    LPAREN          reduce using rule 74 (boolean_literal -> FALSE .)
    DOT             reduce using rule 74 (boolean_literal -> FALSE .)
    RBRACE          reduce using rule 74 (boolean_literal -> FALSE .)


state 49

    (30) expression -> binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    RPAREN          reduce using rule 30 (expression -> binary_expression .)
    SEMICOLON       reduce using rule 30 (expression -> binary_expression .)
    RBRACKET        reduce using rule 30 (expression -> binary_expression .)
    COMMA           reduce using rule 30 (expression -> binary_expression .)
    COLON           reduce using rule 30 (expression -> binary_expression .)
    LBRACKET        reduce using rule 30 (expression -> binary_expression .)
    LPAREN          reduce using rule 30 (expression -> binary_expression .)
    DOT             reduce using rule 30 (expression -> binary_expression .)
    RBRACE          reduce using rule 30 (expression -> binary_expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 85
    OR              shift and go to state 90
    AND             shift and go to state 81
    LT              shift and go to state 87
    GT              shift and go to state 83
    LEQ             shift and go to state 86
    GEQ             shift and go to state 82
    EQ              shift and go to state 89
    NE              shift and go to state 84

  ! PLUS            [ reduce using rule 30 (expression -> binary_expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> binary_expression .) ]
  ! OR              [ reduce using rule 30 (expression -> binary_expression .) ]
  ! AND             [ reduce using rule 30 (expression -> binary_expression .) ]
  ! LT              [ reduce using rule 30 (expression -> binary_expression .) ]
  ! GT              [ reduce using rule 30 (expression -> binary_expression .) ]
  ! LEQ             [ reduce using rule 30 (expression -> binary_expression .) ]
  ! GEQ             [ reduce using rule 30 (expression -> binary_expression .) ]
  ! EQ              [ reduce using rule 30 (expression -> binary_expression .) ]
  ! NE              [ reduce using rule 30 (expression -> binary_expression .) ]


state 50

    (44) unary_expression -> NOT . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 91
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 51

    (17) return_statement -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 92


state 52

    (56) primary_expression -> dict_expression .

    LBRACKET        reduce using rule 56 (primary_expression -> dict_expression .)
    LPAREN          reduce using rule 56 (primary_expression -> dict_expression .)
    DOT             reduce using rule 56 (primary_expression -> dict_expression .)
    PLUS            reduce using rule 56 (primary_expression -> dict_expression .)
    MINUS           reduce using rule 56 (primary_expression -> dict_expression .)
    OR              reduce using rule 56 (primary_expression -> dict_expression .)
    AND             reduce using rule 56 (primary_expression -> dict_expression .)
    LT              reduce using rule 56 (primary_expression -> dict_expression .)
    GT              reduce using rule 56 (primary_expression -> dict_expression .)
    LEQ             reduce using rule 56 (primary_expression -> dict_expression .)
    GEQ             reduce using rule 56 (primary_expression -> dict_expression .)
    EQ              reduce using rule 56 (primary_expression -> dict_expression .)
    NE              reduce using rule 56 (primary_expression -> dict_expression .)
    RPAREN          reduce using rule 56 (primary_expression -> dict_expression .)
    SEMICOLON       reduce using rule 56 (primary_expression -> dict_expression .)
    RBRACKET        reduce using rule 56 (primary_expression -> dict_expression .)
    COMMA           reduce using rule 56 (primary_expression -> dict_expression .)
    COLON           reduce using rule 56 (primary_expression -> dict_expression .)
    RBRACE          reduce using rule 56 (primary_expression -> dict_expression .)


state 53

    (81) lambda_expression -> LAMBDA . identifier_list COLON expression
    (82) lambda_expression -> LAMBDA . COLON expression
    (89) identifier_list -> . ID
    (90) identifier_list -> . identifier_list COMMA ID

    COLON           shift and go to state 93
    ID              shift and go to state 95

    identifier_list                shift and go to state 94

state 54

    (79) named_function_decl -> FUNC ID . LPAREN identifier_list RPAREN compound_statement
    (80) named_function_decl -> FUNC ID . LPAREN RPAREN compound_statement

    LPAREN          shift and go to state 96


state 55

    (23) while_loop_statement -> WHILE LPAREN . expression RPAREN compound_statement
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 97
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 56

    (13) assignment_statement -> lvalue ASSIGN_PLUS . expression SEMICOLON
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 98
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 57

    (29) lvalue -> lvalue LBRACKET . expression RBRACKET
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 99
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 58

    (12) assignment_statement -> lvalue ASSIGN . expression SEMICOLON
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 100
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 59

    (28) lvalue -> lvalue DOT . ID

    ID              shift and go to state 101


state 60

    (21) for_loop_statement -> FOR LPAREN . ID IN expression RPAREN compound_statement

    ID              shift and go to state 102


state 61

    (25) if_statement -> IF LPAREN . expression RPAREN compound_statement
    (26) if_statement -> IF LPAREN . expression RPAREN compound_statement ELSE compound_statement
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 103
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 62

    (24) compound_statement -> LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment_statement
    (5) statement -> . loop_statement
    (6) statement -> . if_statement
    (7) statement -> . break_statement
    (8) statement -> . continue_statement
    (9) statement -> . return_statement
    (10) statement -> . compound_statement
    (11) statement -> . named_function_decl
    (12) assignment_statement -> . lvalue ASSIGN expression SEMICOLON
    (13) assignment_statement -> . lvalue ASSIGN_PLUS expression SEMICOLON
    (18) loop_statement -> . for_loop_statement
    (19) loop_statement -> . do_loop_statement
    (20) loop_statement -> . while_loop_statement
    (25) if_statement -> . IF LPAREN expression RPAREN compound_statement
    (26) if_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (14) break_statement -> . BREAK SEMICOLON
    (15) continue_statement -> . CONTINUE SEMICOLON
    (16) return_statement -> . RETURN SEMICOLON
    (17) return_statement -> . RETURN expression SEMICOLON
    (24) compound_statement -> . LBRACE statement_list RBRACE
    (79) named_function_decl -> . FUNC ID LPAREN identifier_list RPAREN compound_statement
    (80) named_function_decl -> . FUNC ID LPAREN RPAREN compound_statement
    (27) lvalue -> . ID
    (28) lvalue -> . lvalue DOT ID
    (29) lvalue -> . lvalue LBRACKET expression RBRACKET
    (21) for_loop_statement -> . FOR LPAREN ID IN expression RPAREN compound_statement
    (22) do_loop_statement -> . DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON
    (23) while_loop_statement -> . WHILE LPAREN expression RPAREN compound_statement

    RBRACE          shift and go to state 104
    IF              shift and go to state 19
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 2
    LBRACE          shift and go to state 20
    FUNC            shift and go to state 3
    ID              shift and go to state 18
    FOR             shift and go to state 17
    DO              shift and go to state 1
    WHILE           shift and go to state 6

    return_statement               shift and go to state 12
    while_loop_statement           shift and go to state 8
    do_loop_statement              shift and go to state 7
    loop_statement                 shift and go to state 4
    compound_statement             shift and go to state 9
    lvalue                         shift and go to state 10
    for_loop_statement             shift and go to state 21
    assignment_statement           shift and go to state 11
    break_statement                shift and go to state 5
    continue_statement             shift and go to state 13
    statement                      shift and go to state 65
    named_function_decl            shift and go to state 15
    if_statement                   shift and go to state 16

state 63

    (14) break_statement -> BREAK SEMICOLON .

    RBRACE          reduce using rule 14 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 14 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 14 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 14 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 14 (break_statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 14 (break_statement -> BREAK SEMICOLON .)
    FUNC            reduce using rule 14 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 14 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 14 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 14 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 14 (break_statement -> BREAK SEMICOLON .)
    $end            reduce using rule 14 (break_statement -> BREAK SEMICOLON .)


state 64

    (15) continue_statement -> CONTINUE SEMICOLON .

    RBRACE          reduce using rule 15 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 15 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 15 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 15 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 15 (continue_statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 15 (continue_statement -> CONTINUE SEMICOLON .)
    FUNC            reduce using rule 15 (continue_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 15 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 15 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 15 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 15 (continue_statement -> CONTINUE SEMICOLON .)
    $end            reduce using rule 15 (continue_statement -> CONTINUE SEMICOLON .)


state 65

    (3) statement_list -> statement_list statement .

    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 3 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 3 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    FOR             reduce using rule 3 (statement_list -> statement_list statement .)
    DO              reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 66

    (22) do_loop_statement -> DO compound_statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 105


state 67

    (77) function_decl_expression -> FUNC LPAREN . identifier_list RPAREN compound_statement
    (78) function_decl_expression -> FUNC LPAREN . RPAREN compound_statement
    (89) identifier_list -> . ID
    (90) identifier_list -> . identifier_list COMMA ID

    RPAREN          shift and go to state 106
    ID              shift and go to state 95

    identifier_list                shift and go to state 107

state 68

    (76) list_expression -> LBRACKET expression_list . RBRACKET
    (88) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 109
    COMMA           shift and go to state 108


state 69

    (75) list_expression -> LBRACKET RBRACKET .

    PLUS            reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    OR              reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    AND             reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    LT              reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    GT              reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    LEQ             reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    GEQ             reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    EQ              reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    NE              reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    COLON           reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    DOT             reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 75 (list_expression -> LBRACKET RBRACKET .)


state 70

    (87) expression_list -> expression .

    RPAREN          reduce using rule 87 (expression_list -> expression .)
    COMMA           reduce using rule 87 (expression_list -> expression .)
    RBRACKET        reduce using rule 87 (expression_list -> expression .)


state 71

    (61) string_literal -> QUOTATION_MARK string_chars . QUOTATION_MARK
    (63) string_chars -> string_chars . string_char
    (64) string_char -> . UNESCAPED
    (65) string_char -> . ESCAPE QUOTATION_MARK
    (66) string_char -> . ESCAPE BACKSLASH
    (67) string_char -> . ESCAPE BACKSPACE_CHAR
    (68) string_char -> . ESCAPE FORM_FEED_CHAR
    (69) string_char -> . ESCAPE LINE_FEED_CHAR
    (70) string_char -> . ESCAPE CARRIAGE_RETURN_CHAR
    (71) string_char -> . ESCAPE TAB_CHAR
    (72) string_char -> . ESCAPE UNICODE_HEX

    QUOTATION_MARK  shift and go to state 112
    UNESCAPED       shift and go to state 110
    ESCAPE          shift and go to state 111

    string_char                    shift and go to state 113

state 72

    (43) unary_expression -> STAR binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    RBRACKET        reduce using rule 43 (unary_expression -> STAR binary_expression .)
    COMMA           reduce using rule 43 (unary_expression -> STAR binary_expression .)
    RPAREN          reduce using rule 43 (unary_expression -> STAR binary_expression .)
    SEMICOLON       reduce using rule 43 (unary_expression -> STAR binary_expression .)
    COLON           reduce using rule 43 (unary_expression -> STAR binary_expression .)
    LBRACKET        reduce using rule 43 (unary_expression -> STAR binary_expression .)
    LPAREN          reduce using rule 43 (unary_expression -> STAR binary_expression .)
    DOT             reduce using rule 43 (unary_expression -> STAR binary_expression .)
    RBRACE          reduce using rule 43 (unary_expression -> STAR binary_expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 85
    OR              shift and go to state 90
    AND             shift and go to state 81
    LT              shift and go to state 87
    GT              shift and go to state 83
    LEQ             shift and go to state 86
    GEQ             shift and go to state 82
    EQ              shift and go to state 89
    NE              shift and go to state 84

  ! PLUS            [ reduce using rule 43 (unary_expression -> STAR binary_expression .) ]
  ! MINUS           [ reduce using rule 43 (unary_expression -> STAR binary_expression .) ]
  ! OR              [ reduce using rule 43 (unary_expression -> STAR binary_expression .) ]
  ! AND             [ reduce using rule 43 (unary_expression -> STAR binary_expression .) ]
  ! LT              [ reduce using rule 43 (unary_expression -> STAR binary_expression .) ]
  ! GT              [ reduce using rule 43 (unary_expression -> STAR binary_expression .) ]
  ! LEQ             [ reduce using rule 43 (unary_expression -> STAR binary_expression .) ]
  ! GEQ             [ reduce using rule 43 (unary_expression -> STAR binary_expression .) ]
  ! EQ              [ reduce using rule 43 (unary_expression -> STAR binary_expression .) ]
  ! NE              [ reduce using rule 43 (unary_expression -> STAR binary_expression .) ]


state 73

    (45) unary_expression -> MINUS binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

    PLUS            reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    MINUS           reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    OR              reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    AND             reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    LT              reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    GT              reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    LEQ             reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    GEQ             reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    EQ              reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    NE              reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    RBRACKET        reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    COMMA           reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    RPAREN          reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    SEMICOLON       reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    COLON           reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    LBRACKET        reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    LPAREN          reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    DOT             reduce using rule 45 (unary_expression -> MINUS binary_expression .)
    RBRACE          reduce using rule 45 (unary_expression -> MINUS binary_expression .)

  ! PLUS            [ shift and go to state 88 ]
  ! MINUS           [ shift and go to state 85 ]
  ! OR              [ shift and go to state 90 ]
  ! AND             [ shift and go to state 81 ]
  ! LT              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 83 ]
  ! LEQ             [ shift and go to state 86 ]
  ! GEQ             [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 89 ]
  ! NE              [ shift and go to state 84 ]


state 74

    (47) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 114
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 75

    (48) postfix_expression -> postfix_expression LPAREN . expression_list RPAREN
    (49) postfix_expression -> postfix_expression LPAREN . RPAREN
    (87) expression_list -> . expression
    (88) expression_list -> . expression_list COMMA expression
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    RPAREN          shift and go to state 115
    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    expression_list                shift and go to state 116
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 70
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 76

    (50) postfix_expression -> postfix_expression DOT . identifier_name
    (91) identifier_name -> . ID

    ID              shift and go to state 46

    identifier_name                shift and go to state 117

state 77

    (57) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 118


state 78

    (83) dict_expression -> LBRACE RBRACE .

    LBRACKET        reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    LPAREN          reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    DOT             reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    PLUS            reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    MINUS           reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    OR              reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    AND             reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    LT              reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    GT              reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    LEQ             reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    GEQ             reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    EQ              reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    NE              reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    COMMA           reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    RPAREN          reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    COLON           reduce using rule 83 (dict_expression -> LBRACE RBRACE .)
    RBRACE          reduce using rule 83 (dict_expression -> LBRACE RBRACE .)


state 79

    (84) dict_expression -> LBRACE key_value_list . RBRACE
    (86) key_value_list -> key_value_list . COMMA expression COLON expression

    RBRACE          shift and go to state 119
    COMMA           shift and go to state 120


state 80

    (85) key_value_list -> expression . COLON expression

    COLON           shift and go to state 121


state 81

    (35) binary_expression -> binary_expression AND . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 122
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 82

    (39) binary_expression -> binary_expression GEQ . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 123
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 83

    (37) binary_expression -> binary_expression GT . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 124
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 84

    (41) binary_expression -> binary_expression NE . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 125
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 85

    (33) binary_expression -> binary_expression MINUS . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 126
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 86

    (38) binary_expression -> binary_expression LEQ . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 127
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 87

    (36) binary_expression -> binary_expression LT . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 128
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 88

    (32) binary_expression -> binary_expression PLUS . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 129
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 89

    (40) binary_expression -> binary_expression EQ . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 130
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 90

    (34) binary_expression -> binary_expression OR . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 131
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 91

    (44) unary_expression -> NOT binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    RBRACKET        reduce using rule 44 (unary_expression -> NOT binary_expression .)
    COMMA           reduce using rule 44 (unary_expression -> NOT binary_expression .)
    RPAREN          reduce using rule 44 (unary_expression -> NOT binary_expression .)
    SEMICOLON       reduce using rule 44 (unary_expression -> NOT binary_expression .)
    COLON           reduce using rule 44 (unary_expression -> NOT binary_expression .)
    LBRACKET        reduce using rule 44 (unary_expression -> NOT binary_expression .)
    LPAREN          reduce using rule 44 (unary_expression -> NOT binary_expression .)
    DOT             reduce using rule 44 (unary_expression -> NOT binary_expression .)
    RBRACE          reduce using rule 44 (unary_expression -> NOT binary_expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 85
    OR              shift and go to state 90
    AND             shift and go to state 81
    LT              shift and go to state 87
    GT              shift and go to state 83
    LEQ             shift and go to state 86
    GEQ             shift and go to state 82
    EQ              shift and go to state 89
    NE              shift and go to state 84

  ! PLUS            [ reduce using rule 44 (unary_expression -> NOT binary_expression .) ]
  ! MINUS           [ reduce using rule 44 (unary_expression -> NOT binary_expression .) ]
  ! OR              [ reduce using rule 44 (unary_expression -> NOT binary_expression .) ]
  ! AND             [ reduce using rule 44 (unary_expression -> NOT binary_expression .) ]
  ! LT              [ reduce using rule 44 (unary_expression -> NOT binary_expression .) ]
  ! GT              [ reduce using rule 44 (unary_expression -> NOT binary_expression .) ]
  ! LEQ             [ reduce using rule 44 (unary_expression -> NOT binary_expression .) ]
  ! GEQ             [ reduce using rule 44 (unary_expression -> NOT binary_expression .) ]
  ! EQ              [ reduce using rule 44 (unary_expression -> NOT binary_expression .) ]
  ! NE              [ reduce using rule 44 (unary_expression -> NOT binary_expression .) ]


state 92

    (17) return_statement -> RETURN expression SEMICOLON .

    IF              reduce using rule 17 (return_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 17 (return_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 17 (return_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 17 (return_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 17 (return_statement -> RETURN expression SEMICOLON .)
    FUNC            reduce using rule 17 (return_statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 17 (return_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 17 (return_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 17 (return_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 17 (return_statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 17 (return_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 17 (return_statement -> RETURN expression SEMICOLON .)


state 93

    (82) lambda_expression -> LAMBDA COLON . expression
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 132
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 94

    (81) lambda_expression -> LAMBDA identifier_list . COLON expression
    (90) identifier_list -> identifier_list . COMMA ID

    COLON           shift and go to state 133
    COMMA           shift and go to state 134


state 95

    (89) identifier_list -> ID .

    COLON           reduce using rule 89 (identifier_list -> ID .)
    COMMA           reduce using rule 89 (identifier_list -> ID .)
    RPAREN          reduce using rule 89 (identifier_list -> ID .)


state 96

    (79) named_function_decl -> FUNC ID LPAREN . identifier_list RPAREN compound_statement
    (80) named_function_decl -> FUNC ID LPAREN . RPAREN compound_statement
    (89) identifier_list -> . ID
    (90) identifier_list -> . identifier_list COMMA ID

    RPAREN          shift and go to state 135
    ID              shift and go to state 95

    identifier_list                shift and go to state 136

state 97

    (23) while_loop_statement -> WHILE LPAREN expression . RPAREN compound_statement

    RPAREN          shift and go to state 137


state 98

    (13) assignment_statement -> lvalue ASSIGN_PLUS expression . SEMICOLON

    SEMICOLON       shift and go to state 138


state 99

    (29) lvalue -> lvalue LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 139


state 100

    (12) assignment_statement -> lvalue ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 140


state 101

    (28) lvalue -> lvalue DOT ID .

    ASSIGN          reduce using rule 28 (lvalue -> lvalue DOT ID .)
    ASSIGN_PLUS     reduce using rule 28 (lvalue -> lvalue DOT ID .)
    DOT             reduce using rule 28 (lvalue -> lvalue DOT ID .)
    LBRACKET        reduce using rule 28 (lvalue -> lvalue DOT ID .)


state 102

    (21) for_loop_statement -> FOR LPAREN ID . IN expression RPAREN compound_statement

    IN              shift and go to state 141


state 103

    (25) if_statement -> IF LPAREN expression . RPAREN compound_statement
    (26) if_statement -> IF LPAREN expression . RPAREN compound_statement ELSE compound_statement

    RPAREN          shift and go to state 142


state 104

    (24) compound_statement -> LBRACE statement_list RBRACE .

    IF              reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    FUNC            reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    DO              reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACKET        reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    DOT             reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    OR              reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    LEQ             reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    GEQ             reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    NE              reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMICOLON       reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACKET        reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    COMMA           reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    RPAREN          reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    COLON           reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 24 (compound_statement -> LBRACE statement_list RBRACE .)


state 105

    (22) do_loop_statement -> DO compound_statement WHILE LPAREN . expression RPAREN SEMICOLON
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 143
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 106

    (78) function_decl_expression -> FUNC LPAREN RPAREN . compound_statement
    (24) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 20

    compound_statement             shift and go to state 144

state 107

    (77) function_decl_expression -> FUNC LPAREN identifier_list . RPAREN compound_statement
    (90) identifier_list -> identifier_list . COMMA ID

    RPAREN          shift and go to state 145
    COMMA           shift and go to state 134


state 108

    (88) expression_list -> expression_list COMMA . expression
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 146
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 109

    (76) list_expression -> LBRACKET expression_list RBRACKET .

    PLUS            reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    LEQ             reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    GEQ             reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    EQ              reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    NE              reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    LPAREN          reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    DOT             reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)
    RBRACE          reduce using rule 76 (list_expression -> LBRACKET expression_list RBRACKET .)


state 110

    (64) string_char -> UNESCAPED .

    QUOTATION_MARK  reduce using rule 64 (string_char -> UNESCAPED .)
    UNESCAPED       reduce using rule 64 (string_char -> UNESCAPED .)
    ESCAPE          reduce using rule 64 (string_char -> UNESCAPED .)


state 111

    (65) string_char -> ESCAPE . QUOTATION_MARK
    (66) string_char -> ESCAPE . BACKSLASH
    (67) string_char -> ESCAPE . BACKSPACE_CHAR
    (68) string_char -> ESCAPE . FORM_FEED_CHAR
    (69) string_char -> ESCAPE . LINE_FEED_CHAR
    (70) string_char -> ESCAPE . CARRIAGE_RETURN_CHAR
    (71) string_char -> ESCAPE . TAB_CHAR
    (72) string_char -> ESCAPE . UNICODE_HEX

    QUOTATION_MARK  shift and go to state 153
    BACKSLASH       shift and go to state 149
    BACKSPACE_CHAR  shift and go to state 147
    FORM_FEED_CHAR  shift and go to state 152
    LINE_FEED_CHAR  shift and go to state 148
    CARRIAGE_RETURN_CHAR shift and go to state 150
    TAB_CHAR        shift and go to state 154
    UNICODE_HEX     shift and go to state 151


state 112

    (61) string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .

    LBRACKET        reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    LPAREN          reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    DOT             reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    PLUS            reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    MINUS           reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    OR              reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    AND             reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    LT              reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    GT              reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    LEQ             reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    GEQ             reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    EQ              reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    NE              reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    SEMICOLON       reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    RBRACKET        reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    COMMA           reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    RPAREN          reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    COLON           reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)
    RBRACE          reduce using rule 61 (string_literal -> QUOTATION_MARK string_chars QUOTATION_MARK .)


state 113

    (63) string_chars -> string_chars string_char .

    QUOTATION_MARK  reduce using rule 63 (string_chars -> string_chars string_char .)
    UNESCAPED       reduce using rule 63 (string_chars -> string_chars string_char .)
    ESCAPE          reduce using rule 63 (string_chars -> string_chars string_char .)


state 114

    (47) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 155


state 115

    (49) postfix_expression -> postfix_expression LPAREN RPAREN .

    PLUS            reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEQ             reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GEQ             reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LBRACKET        reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 49 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 116

    (48) postfix_expression -> postfix_expression LPAREN expression_list . RPAREN
    (88) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 156
    COMMA           shift and go to state 108


state 117

    (50) postfix_expression -> postfix_expression DOT identifier_name .

    PLUS            reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    MINUS           reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    OR              reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    AND             reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    LT              reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    GT              reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    LEQ             reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    GEQ             reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    EQ              reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    NE              reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    SEMICOLON       reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    RBRACKET        reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    COMMA           reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    RPAREN          reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    COLON           reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    LBRACKET        reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    LPAREN          reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    DOT             reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)
    RBRACE          reduce using rule 50 (postfix_expression -> postfix_expression DOT identifier_name .)


state 118

    (57) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)


state 119

    (84) dict_expression -> LBRACE key_value_list RBRACE .

    LBRACKET        reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    LPAREN          reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    DOT             reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    PLUS            reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    MINUS           reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    OR              reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    AND             reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    LT              reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    GT              reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    LEQ             reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    GEQ             reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    EQ              reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    NE              reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    SEMICOLON       reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    RBRACKET        reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    COMMA           reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    RPAREN          reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    COLON           reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)
    RBRACE          reduce using rule 84 (dict_expression -> LBRACE key_value_list RBRACE .)


state 120

    (86) key_value_list -> key_value_list COMMA . expression COLON expression
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    list_expression                shift and go to state 41
    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 157
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 121

    (85) key_value_list -> expression COLON . expression
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 158
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 122

    (35) binary_expression -> binary_expression AND binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .)
    SEMICOLON       reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .)
    COLON           reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .)
    LBRACKET        reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .)
    LPAREN          reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .)
    DOT             reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 85
    LT              shift and go to state 87
    GT              shift and go to state 83
    LEQ             shift and go to state 86
    GEQ             shift and go to state 82
    EQ              shift and go to state 89
    NE              shift and go to state 84

  ! PLUS            [ reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LEQ             [ reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GEQ             [ reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NE              [ reduce using rule 35 (binary_expression -> binary_expression AND binary_expression .) ]
  ! OR              [ shift and go to state 90 ]
  ! AND             [ shift and go to state 81 ]


state 123

    (39) binary_expression -> binary_expression GEQ binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    AND             reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    LT              reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    GT              reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    LEQ             reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    GEQ             reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    EQ              reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    NE              reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    RPAREN          reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    SEMICOLON       reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    RBRACKET        reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    COMMA           reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    COLON           reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    LBRACKET        reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    LPAREN          reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    DOT             reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    RBRACE          reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 85

  ! PLUS            [ reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .) ]
  ! MINUS           [ reduce using rule 39 (binary_expression -> binary_expression GEQ binary_expression .) ]
  ! OR              [ shift and go to state 90 ]
  ! AND             [ shift and go to state 81 ]
  ! LT              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 83 ]
  ! LEQ             [ shift and go to state 86 ]
  ! GEQ             [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 89 ]
  ! NE              [ shift and go to state 84 ]


state 124

    (37) binary_expression -> binary_expression GT binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    LT              reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    LEQ             reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    GEQ             reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    SEMICOLON       reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    COLON           reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    LBRACKET        reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    LPAREN          reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    DOT             reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 85

  ! PLUS            [ reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 37 (binary_expression -> binary_expression GT binary_expression .) ]
  ! OR              [ shift and go to state 90 ]
  ! AND             [ shift and go to state 81 ]
  ! LT              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 83 ]
  ! LEQ             [ shift and go to state 86 ]
  ! GEQ             [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 89 ]
  ! NE              [ shift and go to state 84 ]


state 125

    (41) binary_expression -> binary_expression NE binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    EQ              reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    SEMICOLON       reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    COLON           reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    LBRACKET        reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    LPAREN          reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    DOT             reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 85
    LT              shift and go to state 87
    GT              shift and go to state 83
    LEQ             shift and go to state 86
    GEQ             shift and go to state 82

  ! PLUS            [ reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GT              [ reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LEQ             [ reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GEQ             [ reduce using rule 41 (binary_expression -> binary_expression NE binary_expression .) ]
  ! OR              [ shift and go to state 90 ]
  ! AND             [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 89 ]
  ! NE              [ shift and go to state 84 ]


state 126

    (33) binary_expression -> binary_expression MINUS binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

    PLUS            reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    LEQ             reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    GEQ             reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMICOLON       reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    COLON           reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    LBRACKET        reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    LPAREN          reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    DOT             reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 33 (binary_expression -> binary_expression MINUS binary_expression .)

  ! PLUS            [ shift and go to state 88 ]
  ! MINUS           [ shift and go to state 85 ]
  ! OR              [ shift and go to state 90 ]
  ! AND             [ shift and go to state 81 ]
  ! LT              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 83 ]
  ! LEQ             [ shift and go to state 86 ]
  ! GEQ             [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 89 ]
  ! NE              [ shift and go to state 84 ]


state 127

    (38) binary_expression -> binary_expression LEQ binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    AND             reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    LT              reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    GT              reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    LEQ             reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    GEQ             reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    EQ              reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    NE              reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    RPAREN          reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    SEMICOLON       reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    RBRACKET        reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    COMMA           reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    COLON           reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    LBRACKET        reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    LPAREN          reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    DOT             reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    RBRACE          reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 85

  ! PLUS            [ reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .) ]
  ! MINUS           [ reduce using rule 38 (binary_expression -> binary_expression LEQ binary_expression .) ]
  ! OR              [ shift and go to state 90 ]
  ! AND             [ shift and go to state 81 ]
  ! LT              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 83 ]
  ! LEQ             [ shift and go to state 86 ]
  ! GEQ             [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 89 ]
  ! NE              [ shift and go to state 84 ]


state 128

    (36) binary_expression -> binary_expression LT binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    LT              reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    LEQ             reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    GEQ             reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    SEMICOLON       reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    COLON           reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    LBRACKET        reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    LPAREN          reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    DOT             reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 85

  ! PLUS            [ reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 36 (binary_expression -> binary_expression LT binary_expression .) ]
  ! OR              [ shift and go to state 90 ]
  ! AND             [ shift and go to state 81 ]
  ! LT              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 83 ]
  ! LEQ             [ shift and go to state 86 ]
  ! GEQ             [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 89 ]
  ! NE              [ shift and go to state 84 ]


state 129

    (32) binary_expression -> binary_expression PLUS binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

    PLUS            reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    LEQ             reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    GEQ             reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMICOLON       reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    COLON           reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    LBRACKET        reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    LPAREN          reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    DOT             reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 32 (binary_expression -> binary_expression PLUS binary_expression .)

  ! PLUS            [ shift and go to state 88 ]
  ! MINUS           [ shift and go to state 85 ]
  ! OR              [ shift and go to state 90 ]
  ! AND             [ shift and go to state 81 ]
  ! LT              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 83 ]
  ! LEQ             [ shift and go to state 86 ]
  ! GEQ             [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 89 ]
  ! NE              [ shift and go to state 84 ]


state 130

    (40) binary_expression -> binary_expression EQ binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    SEMICOLON       reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    COLON           reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    LBRACKET        reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    LPAREN          reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    DOT             reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 85
    LT              shift and go to state 87
    GT              shift and go to state 83
    LEQ             shift and go to state 86
    GEQ             shift and go to state 82

  ! PLUS            [ reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LEQ             [ reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GEQ             [ reduce using rule 40 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! OR              [ shift and go to state 90 ]
  ! AND             [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 89 ]
  ! NE              [ shift and go to state 84 ]


state 131

    (34) binary_expression -> binary_expression OR binary_expression .
    (32) binary_expression -> binary_expression . PLUS binary_expression
    (33) binary_expression -> binary_expression . MINUS binary_expression
    (34) binary_expression -> binary_expression . OR binary_expression
    (35) binary_expression -> binary_expression . AND binary_expression
    (36) binary_expression -> binary_expression . LT binary_expression
    (37) binary_expression -> binary_expression . GT binary_expression
    (38) binary_expression -> binary_expression . LEQ binary_expression
    (39) binary_expression -> binary_expression . GEQ binary_expression
    (40) binary_expression -> binary_expression . EQ binary_expression
    (41) binary_expression -> binary_expression . NE binary_expression

    OR              reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .)
    SEMICOLON       reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .)
    COLON           reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .)
    LBRACKET        reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .)
    LPAREN          reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .)
    DOT             reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 85
    AND             shift and go to state 81
    LT              shift and go to state 87
    GT              shift and go to state 83
    LEQ             shift and go to state 86
    GEQ             shift and go to state 82
    EQ              shift and go to state 89
    NE              shift and go to state 84

  ! PLUS            [ reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LEQ             [ reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GEQ             [ reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NE              [ reduce using rule 34 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 90 ]


state 132

    (82) lambda_expression -> LAMBDA COLON expression .

    PLUS            reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    MINUS           reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    OR              reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    AND             reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    LT              reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    GT              reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    LEQ             reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    GEQ             reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    EQ              reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    NE              reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    SEMICOLON       reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    RBRACKET        reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    COMMA           reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    RPAREN          reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    COLON           reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    LBRACKET        reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    LPAREN          reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    DOT             reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)
    RBRACE          reduce using rule 82 (lambda_expression -> LAMBDA COLON expression .)


state 133

    (81) lambda_expression -> LAMBDA identifier_list COLON . expression
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 159
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 134

    (90) identifier_list -> identifier_list COMMA . ID

    ID              shift and go to state 160


state 135

    (80) named_function_decl -> FUNC ID LPAREN RPAREN . compound_statement
    (24) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 20

    compound_statement             shift and go to state 161

state 136

    (79) named_function_decl -> FUNC ID LPAREN identifier_list . RPAREN compound_statement
    (90) identifier_list -> identifier_list . COMMA ID

    RPAREN          shift and go to state 162
    COMMA           shift and go to state 134


state 137

    (23) while_loop_statement -> WHILE LPAREN expression RPAREN . compound_statement
    (24) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 20

    compound_statement             shift and go to state 163

state 138

    (13) assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .

    IF              reduce using rule 13 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    BREAK           reduce using rule 13 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    CONTINUE        reduce using rule 13 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    RETURN          reduce using rule 13 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    LBRACE          reduce using rule 13 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    FUNC            reduce using rule 13 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    ID              reduce using rule 13 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    FOR             reduce using rule 13 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    DO              reduce using rule 13 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    WHILE           reduce using rule 13 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    $end            reduce using rule 13 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)
    RBRACE          reduce using rule 13 (assignment_statement -> lvalue ASSIGN_PLUS expression SEMICOLON .)


state 139

    (29) lvalue -> lvalue LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 29 (lvalue -> lvalue LBRACKET expression RBRACKET .)
    ASSIGN_PLUS     reduce using rule 29 (lvalue -> lvalue LBRACKET expression RBRACKET .)
    DOT             reduce using rule 29 (lvalue -> lvalue LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 29 (lvalue -> lvalue LBRACKET expression RBRACKET .)


state 140

    (12) assignment_statement -> lvalue ASSIGN expression SEMICOLON .

    IF              reduce using rule 12 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 12 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    CONTINUE        reduce using rule 12 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 12 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    LBRACE          reduce using rule 12 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    FUNC            reduce using rule 12 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    ID              reduce using rule 12 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 12 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    DO              reduce using rule 12 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 12 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    $end            reduce using rule 12 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 12 (assignment_statement -> lvalue ASSIGN expression SEMICOLON .)


state 141

    (21) for_loop_statement -> FOR LPAREN ID IN . expression RPAREN compound_statement
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    list_expression                shift and go to state 41
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 164
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 142

    (25) if_statement -> IF LPAREN expression RPAREN . compound_statement
    (26) if_statement -> IF LPAREN expression RPAREN . compound_statement ELSE compound_statement
    (24) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 20

    compound_statement             shift and go to state 165

state 143

    (22) do_loop_statement -> DO compound_statement WHILE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 166


state 144

    (78) function_decl_expression -> FUNC LPAREN RPAREN compound_statement .

    PLUS            reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    MINUS           reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    OR              reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    AND             reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    LT              reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    GT              reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    LEQ             reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    GEQ             reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    EQ              reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    NE              reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    SEMICOLON       reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    RBRACKET        reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    COMMA           reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    RPAREN          reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    COLON           reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    LBRACKET        reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    LPAREN          reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    DOT             reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)
    RBRACE          reduce using rule 78 (function_decl_expression -> FUNC LPAREN RPAREN compound_statement .)


state 145

    (77) function_decl_expression -> FUNC LPAREN identifier_list RPAREN . compound_statement
    (24) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 20

    compound_statement             shift and go to state 167

state 146

    (88) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 88 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 88 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 88 (expression_list -> expression_list COMMA expression .)


state 147

    (67) string_char -> ESCAPE BACKSPACE_CHAR .

    QUOTATION_MARK  reduce using rule 67 (string_char -> ESCAPE BACKSPACE_CHAR .)
    UNESCAPED       reduce using rule 67 (string_char -> ESCAPE BACKSPACE_CHAR .)
    ESCAPE          reduce using rule 67 (string_char -> ESCAPE BACKSPACE_CHAR .)


state 148

    (69) string_char -> ESCAPE LINE_FEED_CHAR .

    QUOTATION_MARK  reduce using rule 69 (string_char -> ESCAPE LINE_FEED_CHAR .)
    UNESCAPED       reduce using rule 69 (string_char -> ESCAPE LINE_FEED_CHAR .)
    ESCAPE          reduce using rule 69 (string_char -> ESCAPE LINE_FEED_CHAR .)


state 149

    (66) string_char -> ESCAPE BACKSLASH .

    QUOTATION_MARK  reduce using rule 66 (string_char -> ESCAPE BACKSLASH .)
    UNESCAPED       reduce using rule 66 (string_char -> ESCAPE BACKSLASH .)
    ESCAPE          reduce using rule 66 (string_char -> ESCAPE BACKSLASH .)


state 150

    (70) string_char -> ESCAPE CARRIAGE_RETURN_CHAR .

    QUOTATION_MARK  reduce using rule 70 (string_char -> ESCAPE CARRIAGE_RETURN_CHAR .)
    UNESCAPED       reduce using rule 70 (string_char -> ESCAPE CARRIAGE_RETURN_CHAR .)
    ESCAPE          reduce using rule 70 (string_char -> ESCAPE CARRIAGE_RETURN_CHAR .)


state 151

    (72) string_char -> ESCAPE UNICODE_HEX .

    QUOTATION_MARK  reduce using rule 72 (string_char -> ESCAPE UNICODE_HEX .)
    UNESCAPED       reduce using rule 72 (string_char -> ESCAPE UNICODE_HEX .)
    ESCAPE          reduce using rule 72 (string_char -> ESCAPE UNICODE_HEX .)


state 152

    (68) string_char -> ESCAPE FORM_FEED_CHAR .

    QUOTATION_MARK  reduce using rule 68 (string_char -> ESCAPE FORM_FEED_CHAR .)
    UNESCAPED       reduce using rule 68 (string_char -> ESCAPE FORM_FEED_CHAR .)
    ESCAPE          reduce using rule 68 (string_char -> ESCAPE FORM_FEED_CHAR .)


state 153

    (65) string_char -> ESCAPE QUOTATION_MARK .

    QUOTATION_MARK  reduce using rule 65 (string_char -> ESCAPE QUOTATION_MARK .)
    UNESCAPED       reduce using rule 65 (string_char -> ESCAPE QUOTATION_MARK .)
    ESCAPE          reduce using rule 65 (string_char -> ESCAPE QUOTATION_MARK .)


state 154

    (71) string_char -> ESCAPE TAB_CHAR .

    QUOTATION_MARK  reduce using rule 71 (string_char -> ESCAPE TAB_CHAR .)
    UNESCAPED       reduce using rule 71 (string_char -> ESCAPE TAB_CHAR .)
    ESCAPE          reduce using rule 71 (string_char -> ESCAPE TAB_CHAR .)


state 155

    (47) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    PLUS            reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LEQ             reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GEQ             reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOT             reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 47 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 156

    (48) postfix_expression -> postfix_expression LPAREN expression_list RPAREN .

    PLUS            reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    OR              reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    AND             reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LT              reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GT              reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LEQ             reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GEQ             reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQ              reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    NE              reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COLON           reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LBRACKET        reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOT             reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RBRACE          reduce using rule 48 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)


state 157

    (86) key_value_list -> key_value_list COMMA expression . COLON expression

    COLON           shift and go to state 168


state 158

    (85) key_value_list -> expression COLON expression .

    RBRACE          reduce using rule 85 (key_value_list -> expression COLON expression .)
    COMMA           reduce using rule 85 (key_value_list -> expression COLON expression .)


state 159

    (81) lambda_expression -> LAMBDA identifier_list COLON expression .

    PLUS            reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    MINUS           reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    OR              reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    AND             reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    LT              reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    GT              reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    LEQ             reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    GEQ             reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    EQ              reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    NE              reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    SEMICOLON       reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    RBRACKET        reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    COMMA           reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    RPAREN          reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    COLON           reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    LBRACKET        reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    LPAREN          reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    DOT             reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)
    RBRACE          reduce using rule 81 (lambda_expression -> LAMBDA identifier_list COLON expression .)


state 160

    (90) identifier_list -> identifier_list COMMA ID .

    COLON           reduce using rule 90 (identifier_list -> identifier_list COMMA ID .)
    COMMA           reduce using rule 90 (identifier_list -> identifier_list COMMA ID .)
    RPAREN          reduce using rule 90 (identifier_list -> identifier_list COMMA ID .)


state 161

    (80) named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .

    IF              reduce using rule 80 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    BREAK           reduce using rule 80 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    CONTINUE        reduce using rule 80 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    RETURN          reduce using rule 80 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    LBRACE          reduce using rule 80 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    FUNC            reduce using rule 80 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    ID              reduce using rule 80 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    FOR             reduce using rule 80 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    DO              reduce using rule 80 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    WHILE           reduce using rule 80 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    $end            reduce using rule 80 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)
    RBRACE          reduce using rule 80 (named_function_decl -> FUNC ID LPAREN RPAREN compound_statement .)


state 162

    (79) named_function_decl -> FUNC ID LPAREN identifier_list RPAREN . compound_statement
    (24) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 20

    compound_statement             shift and go to state 169

state 163

    (23) while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .

    IF              reduce using rule 23 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    BREAK           reduce using rule 23 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    CONTINUE        reduce using rule 23 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    RETURN          reduce using rule 23 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    LBRACE          reduce using rule 23 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    FUNC            reduce using rule 23 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    ID              reduce using rule 23 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    FOR             reduce using rule 23 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    DO              reduce using rule 23 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    WHILE           reduce using rule 23 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    $end            reduce using rule 23 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    RBRACE          reduce using rule 23 (while_loop_statement -> WHILE LPAREN expression RPAREN compound_statement .)


state 164

    (21) for_loop_statement -> FOR LPAREN ID IN expression . RPAREN compound_statement

    RPAREN          shift and go to state 170


state 165

    (25) if_statement -> IF LPAREN expression RPAREN compound_statement .
    (26) if_statement -> IF LPAREN expression RPAREN compound_statement . ELSE compound_statement

    RBRACE          reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    IF              reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    BREAK           reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    CONTINUE        reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    RETURN          reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    LBRACE          reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    FUNC            reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    ID              reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    FOR             reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    DO              reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    WHILE           reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    $end            reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    ELSE            shift and go to state 171


state 166

    (22) do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 172


state 167

    (77) function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .

    PLUS            reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    MINUS           reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    OR              reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    AND             reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    LT              reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    GT              reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    LEQ             reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    GEQ             reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    EQ              reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    NE              reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    SEMICOLON       reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    RBRACKET        reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    COMMA           reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    RPAREN          reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    COLON           reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    LBRACKET        reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    LPAREN          reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    DOT             reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)
    RBRACE          reduce using rule 77 (function_decl_expression -> FUNC LPAREN identifier_list RPAREN compound_statement .)


state 168

    (86) key_value_list -> key_value_list COMMA expression COLON . expression
    (30) expression -> . binary_expression
    (31) binary_expression -> . unary_expression
    (32) binary_expression -> . binary_expression PLUS binary_expression
    (33) binary_expression -> . binary_expression MINUS binary_expression
    (34) binary_expression -> . binary_expression OR binary_expression
    (35) binary_expression -> . binary_expression AND binary_expression
    (36) binary_expression -> . binary_expression LT binary_expression
    (37) binary_expression -> . binary_expression GT binary_expression
    (38) binary_expression -> . binary_expression LEQ binary_expression
    (39) binary_expression -> . binary_expression GEQ binary_expression
    (40) binary_expression -> . binary_expression EQ binary_expression
    (41) binary_expression -> . binary_expression NE binary_expression
    (42) unary_expression -> . postfix_expression
    (43) unary_expression -> . STAR binary_expression
    (44) unary_expression -> . NOT binary_expression
    (45) unary_expression -> . MINUS binary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (48) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (49) postfix_expression -> . postfix_expression LPAREN RPAREN
    (50) postfix_expression -> . postfix_expression DOT identifier_name
    (51) primary_expression -> . identifier_name
    (52) primary_expression -> . list_expression
    (53) primary_expression -> . constant
    (54) primary_expression -> . function_decl_expression
    (55) primary_expression -> . lambda_expression
    (56) primary_expression -> . dict_expression
    (57) primary_expression -> . LPAREN expression RPAREN
    (91) identifier_name -> . ID
    (75) list_expression -> . LBRACKET RBRACKET
    (76) list_expression -> . LBRACKET expression_list RBRACKET
    (58) constant -> . INT_LITERAL
    (59) constant -> . string_literal
    (60) constant -> . boolean_literal
    (77) function_decl_expression -> . FUNC LPAREN identifier_list RPAREN compound_statement
    (78) function_decl_expression -> . FUNC LPAREN RPAREN compound_statement
    (81) lambda_expression -> . LAMBDA identifier_list COLON expression
    (82) lambda_expression -> . LAMBDA COLON expression
    (83) dict_expression -> . LBRACE RBRACE
    (84) dict_expression -> . LBRACE key_value_list RBRACE
    (61) string_literal -> . QUOTATION_MARK string_chars QUOTATION_MARK
    (73) boolean_literal -> . TRUE
    (74) boolean_literal -> . FALSE

    STAR            shift and go to state 33
    NOT             shift and go to state 50
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 44
    ID              shift and go to state 46
    LBRACKET        shift and go to state 31
    INT_LITERAL     shift and go to state 42
    FUNC            shift and go to state 27
    LAMBDA          shift and go to state 53
    LBRACE          shift and go to state 47
    QUOTATION_MARK  shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 48

    list_expression                shift and go to state 41
    constant                       shift and go to state 39
    binary_expression              shift and go to state 49
    unary_expression               shift and go to state 28
    lambda_expression              shift and go to state 29
    postfix_expression             shift and go to state 38
    boolean_literal                shift and go to state 30
    primary_expression             shift and go to state 43
    function_decl_expression       shift and go to state 45
    identifier_name                shift and go to state 34
    expression                     shift and go to state 173
    dict_expression                shift and go to state 52
    string_literal                 shift and go to state 40

state 169

    (79) named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .

    IF              reduce using rule 79 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    BREAK           reduce using rule 79 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    CONTINUE        reduce using rule 79 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    RETURN          reduce using rule 79 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    LBRACE          reduce using rule 79 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    FUNC            reduce using rule 79 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    ID              reduce using rule 79 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    FOR             reduce using rule 79 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    DO              reduce using rule 79 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    WHILE           reduce using rule 79 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    $end            reduce using rule 79 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)
    RBRACE          reduce using rule 79 (named_function_decl -> FUNC ID LPAREN identifier_list RPAREN compound_statement .)


state 170

    (21) for_loop_statement -> FOR LPAREN ID IN expression RPAREN . compound_statement
    (24) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 20

    compound_statement             shift and go to state 174

state 171

    (26) if_statement -> IF LPAREN expression RPAREN compound_statement ELSE . compound_statement
    (24) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 20

    compound_statement             shift and go to state 175

state 172

    (22) do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .

    IF              reduce using rule 22 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 22 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 22 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 22 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 22 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FUNC            reduce using rule 22 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 22 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 22 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 22 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 22 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 22 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 22 (do_loop_statement -> DO compound_statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 173

    (86) key_value_list -> key_value_list COMMA expression COLON expression .

    RBRACE          reduce using rule 86 (key_value_list -> key_value_list COMMA expression COLON expression .)
    COMMA           reduce using rule 86 (key_value_list -> key_value_list COMMA expression COLON expression .)


state 174

    (21) for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .

    RBRACE          reduce using rule 21 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    IF              reduce using rule 21 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    BREAK           reduce using rule 21 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    CONTINUE        reduce using rule 21 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    RETURN          reduce using rule 21 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    LBRACE          reduce using rule 21 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    FUNC            reduce using rule 21 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    ID              reduce using rule 21 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    FOR             reduce using rule 21 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    DO              reduce using rule 21 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    WHILE           reduce using rule 21 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)
    $end            reduce using rule 21 (for_loop_statement -> FOR LPAREN ID IN expression RPAREN compound_statement .)


state 175

    (26) if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .

    RBRACE          reduce using rule 26 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    IF              reduce using rule 26 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    BREAK           reduce using rule 26 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    CONTINUE        reduce using rule 26 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    RETURN          reduce using rule 26 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    LBRACE          reduce using rule 26 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    FUNC            reduce using rule 26 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    ID              reduce using rule 26 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    FOR             reduce using rule 26 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    DO              reduce using rule 26 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    WHILE           reduce using rule 26 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    $end            reduce using rule 26 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 38 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 38 resolved as shift
WARNING: shift/reduce conflict for DOT in state 38 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for OR in state 49 resolved as shift
WARNING: shift/reduce conflict for AND in state 49 resolved as shift
WARNING: shift/reduce conflict for LT in state 49 resolved as shift
WARNING: shift/reduce conflict for GT in state 49 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 49 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 49 resolved as shift
WARNING: shift/reduce conflict for EQ in state 49 resolved as shift
WARNING: shift/reduce conflict for NE in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for LT in state 72 resolved as shift
WARNING: shift/reduce conflict for GT in state 72 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for EQ in state 72 resolved as shift
WARNING: shift/reduce conflict for NE in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for LT in state 91 resolved as shift
WARNING: shift/reduce conflict for GT in state 91 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 91 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 91 resolved as shift
WARNING: shift/reduce conflict for EQ in state 91 resolved as shift
WARNING: shift/reduce conflict for NE in state 91 resolved as shift
